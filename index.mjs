// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number-array@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-typed-array-like@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-normal-cdf@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-normal-quantile@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-sqrt@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-abs@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-mean@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-ninf@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-pinf@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@esm/index.mjs";var w=h.isPrimitive,x=u,y=c.isPrimitive,E=j,V=v,T=a;var O=function(t,e){return x(e)?V(e,"alpha")&&(t.alpha=e.alpha,!w(t.alpha)||E(t.alpha))?new TypeError(T("invalid option. `%s` option must be a number. Option: `%s`.","alpha",t.alpha)):V(e,"alternative")&&(t.alternative=e.alternative,!y(t.alternative))?new TypeError(T("invalid option. `%s` option must be a string. Option: `%s`.","alternative",t.alternative)):V(e,"mu")&&(t.mu=e.mu,!w(t.mu)||E(t.mu))?new TypeError(T("invalid option. `%s` option must be a number. Option: `%s`.","mu",t.mu)):null:new TypeError(T("invalid argument. Options argument must be an object. Value: `%s`.",e))},k=b,F=u,P=f.isPrimitive,q=v,R=g,z=a;var A=function(t){var e,s,i;if(s=4,e=!0,arguments.length>0){if(!F(t))throw new TypeError(z("invalid argument. First argument must be an options object. Value: `%s`.",t));if(q(t,"digits")){if(!k(t.digits))throw new TypeError(z("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",t.digits));s=t.digits}if(q(t,"decision")){if(!P(t.decision))throw new TypeError(z("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",t.decision));e=t.decision}}switch(i="",i+=this.method,i+="\n\n",i+="Alternative hypothesis: ",i+="True mean is ",this.alternative){case"two-sided":default:i+="not equal to ";break;case"less":i+="less than ";break;case"greater":i+="greater than "}return i+=this.nullValue,i+="\n\n",i+="    pValue: "+R(this.pValue,-s)+"\n",i+="    statistic: "+R(this.statistic,-s)+"\n",i+="    "+100*(1-this.alpha)+"% confidence interval: ["+R(this.ci[0],-s)+","+R(this.ci[1],-s)+"]",i+="\n\n",e&&(i+="Test Decision: ",this.rejected?i+="Reject null in favor of alternative at "+100*this.alpha+"% significance level":i+="Fail to reject null in favor of alternative at "+100*this.alpha+"% significance level",i+="\n"),i},D=t.isPrimitive,I=e.primitives,S=s,B=i,C=n.factory,G=r.factory,H=a,J=o,K=m,L=l,M=d,N=p,Q=O,U=A,W=C(0,1),X=G(0,1);var Y=function(t,e,s){var i,n,r,a,o,m,l,d,p,h,u;if(!S(t)&&!I(t))throw new TypeError(H("invalid argument. First argument `x` must be a numeric array. Value: `%s`.",t));if(!D(e))throw new TypeError(H("invalid argument. Second argument `sigma` must be a positive number. Value: `%s`.",e));if(h=t.length,o={},s&&(d=Q(o,s)))throw d;if(u=o.mu||0,(n=void 0===o.alpha?.05:o.alpha)<0||n>1)throw new RangeError(H("invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.",n));if(h<2)throw new Error(H("invalid argument. First argument must contain at least two elements. Value: `%s`.",t));switch(i=J(e*e/h),m=(L(h,t,1)-u)/i,l=o.alternative||"two-sided"){case"two-sided":a=2*W(-K(m)),(r=[m-X(1-n/2),m+X(1-n/2)])[0]=u+r[0]*i,r[1]=u+r[1]*i;break;case"greater":a=1-W(m),(r=[m-X(1-n),N])[0]=u+r[0]*i;break;case"less":a=W(m),(r=[M,m+X(1-n)])[1]=u+r[1]*i;break;default:throw new Error(H("Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.",l))}return B(p={},"rejected",a<=n),B(p,"alpha",n),B(p,"pValue",a),B(p,"statistic",m),B(p,"ci",r),B(p,"alternative",l),B(p,"nullValue",u),B(p,"sd",i),B(p,"method","One-sample z-test"),B(p,"print",U),p};export{Y as default};
//# sourceMappingURL=index.mjs.map
