{"version":3,"file":"index.mjs","sources":["../lib/print.js","../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '1Lz3L,Gc', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '1Lz3P,Fv', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '1Lz2o,GE', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True mean is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert-is-positive-number';\nimport { primitives as isNumberArray } from '@stdlib/assert-is-number-array';\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport { factory as cdfFactory } from '@stdlib/stats-base-dists-normal-cdf';\nimport { factory as quantileFactory } from '@stdlib/stats-base-dists-normal-quantile';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport mean from '@stdlib/stats-base-mean';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport validate from './validate.js';\nimport print from './print.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar normalCDF = cdfFactory( 0.0, 1.0 );\nvar normalQuantile = quantileFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample z-test.\n*\n* @param {NumericArray} x - data array\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.mu=0] - mean under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} sigma argument has to be a positive number\n* @throws {TypeError} options must be an object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} mu option has to be a number\n* @throws {TypeError} sigma option has to be a positive number\n* @returns {Object} test result object\n*\n* @example\n* var arr = [ 4, 4, 6, 6, 5 ];\n* var out = ztest( arr, 1.0, {\n*     'mu': 5\n* });\n*\n* @example\n* var arr = [ 4, 4, 6, 6, 5 ];\n* var out = ztest( arr, 1.0, {\n*     'alternative': 'greater'\n* });\n*/\nfunction ztest( x, sigma, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar len;\n\tvar mu;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( '1Lz8R,GO', x ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( '1Lz72,Go', sigma ) );\n\t}\n\tlen = x.length;\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmu = opts.mu || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( '1Lz8V,Gb', 'alpha', alpha ) );\n\t}\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( '1Lz8S,A2,Gl,Gp', x ) );\n\t}\n\tstderr = sqrt( sigma*sigma / len );\n\txmean = mean( len, x, 1 );\n\tstat = ( xmean - mu ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normalCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normalQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normalQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = mu + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = mu + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normalCDF( stat );\n\t\tcint = [ stat - normalQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = mu + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normalCDF( stat );\n\t\tcint = [ NINF, stat + normalQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = mu + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( '1Lz2X,3g,4S,GD,Gg,Jm', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'nullValue', mu );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'method', 'One-sample z-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isnan from '@stdlib/assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.mu] - mean under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1Lz2V,FD', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '1Lz8P,GU', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( '1Lz2W,Gh', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( '1Lz8P,GU', 'mu', opts.mu ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["print","opts","decision","dgts","str","arguments","length","isObject","TypeError","format","hasOwnProp","isPositiveInteger","digits","isBoolean","this","method","alternative","nullValue","roundn","pValue","statistic","alpha","ci","rejected","normalCDF","cdfFactory","normalQuantile","quantileFactory","ztest","x","sigma","options","stderr","cint","pval","stat","alt","err","out","len","mu","isTypedArrayLike","isNumberArray","isPositiveNumber","isNumber","isnan","isString","validate","RangeError","Error","sqrt","mean","abs","PINF","NINF","join","setReadOnly"],"mappings":"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"}