{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/print.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.mu] - mean under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'mu', opts.mu ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True mean is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveNumber = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar cdfFactory = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar quantileFactory = require( '@stdlib/stats-base-dists-normal-quantile' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar mean = require( '@stdlib/stats-base-mean' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar normalCDF = cdfFactory( 0.0, 1.0 );\nvar normalQuantile = quantileFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample z-test.\n*\n* @param {NumericArray} x - data array\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.mu=0] - mean under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} sigma argument has to be a positive number\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} mu option has to be a number\n* @throws {TypeError} sigma option has to be a positive number\n* @returns {Object} test result object\n*\n* @example\n* var arr = [ 4, 4, 6, 6, 5 ];\n* var out = ztest( arr, 1.0, {\n*     'mu': 5\n* });\n*\n* @example\n* var arr = [ 4, 4, 6, 6, 5 ];\n* var out = ztest( arr, 1.0, {\n*     'alternative': 'greater'\n* });\n*/\nfunction ztest( x, sigma, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar len;\n\tvar mu;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `sigma` must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\tlen = x.length;\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmu = opts.mu || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( 'invalid argument. First argument must contain at least two elements. Value: `%s`.', x ) );\n\t}\n\tstderr = sqrt( sigma*sigma / len );\n\txmean = mean( len, x, 1 );\n\tstat = ( xmean - mu ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normalCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normalQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normalQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = mu + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = mu + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normalCDF( stat );\n\t\tcint = [ stat - normalQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = mu + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normalCDF( stat );\n\t\tcint = [ NINF, stat + normalQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = mu + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'nullValue', mu );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'method', 'One-sample z-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample z-Test.\n*\n* @module @stdlib/stats-ztest\n*\n* @example\n* var ztest = require( '@stdlib/stats-ztest' );\n* var normal = require( '@stdlib/random-base-normal' ).factory;\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample z-test:\n* x = new Array( 300 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = ztest( x, 2.0 );\n*/\n\n// MODULES //\n\nvar ztest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ztest;\n"],"names":["isNumber","require$$0","isPrimitive","isObject","require$$1","isString","require$$2","isnan","require$$3","hasOwnProp","require$$4","format","require$$5","validate_1","opts","options","alpha","TypeError","alternative","mu","isPositiveInteger","isBoolean","roundn","print_1","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","ci","rejected","isPositiveNumber","isNumberArray","primitives","isTypedArrayLike","setReadOnly","cdfFactory","factory","quantileFactory","require$$6","sqrt","require$$7","abs","require$$8","mean","require$$9","NINF","require$$10","PINF","require$$11","validate","require$$12","print","require$$13","normalCDF","normalQuantile","lib","x","sigma","stderr","cint","pval","stat","alt","err","out","len","RangeError","Error"],"mappings":"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"}